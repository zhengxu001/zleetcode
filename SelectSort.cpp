/* by zen, April 22,2104
插入排序(Insertion Sort)的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列,对
于未排序数据,在已排序序列中从后向前扫描,找到相应位置并插入。
插入排序在实现上,通常采用in­place排序(即只需用到O(1)的额外空间的排序)因而在从后向前扫描过程中,需要反复把已排序元素逐步向后挪位, 为最新元素提供插入空间。
2)算法描述和分析
一般来说,插入排序都采用in­place在数组上实现。具体算法描述如下: 
1、从第一个元素开始,该元素可以认为已经被排序 
2、取出下一个元素,在已经排序的元素序列中从后向前扫描 
3、如果该元素(已排序)大于新元素,将该元素移到下一位置 
4、重复步骤3,直到找到已排序的元素小于或者等于新元素的位置 
5、将新元素插入到该位置后
6、重复步骤2~5 
如果目标是把n个元素的序列升序排列,那么采用插入排序存在最好情况和最坏情况。
最好情况,已经是升序排列了,需要进行的比较操作需(n­1)次即可。
最坏情况,序列是降序排列,那 么此时需要进行的比较共有n(n­1)/2次。
插入排序的赋值操作是比较操作的次数减去(n­1)次。平均来说插入排序
算法复杂度为O(n^2)。因而,插入排序不适合对于数据量比较大的排序应用。但是,如果需要排序的数据量很
例如,量级小于千,那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用,在
句总结
STL的sort算法和stdlib的qsort算法中,都将插入排序作为快速排序的补充
用于少量元素的排序(通常为8个或 统常考知识点
*/
#include <stdio.h>

const int INF = 9999999;

void SelectSort(int a[],int n)
{
	for(int i=0;i<n;i++)
	{
		int index=i;
		int min=INF;
		for(int j=i;j<n;j++)
		{
			if(a[j]<min)
			{
				min=a[j];
				index = j;
			}
		}
		a[index]=a[i];
		a[i]=min;
	}
}

int main(int argc, char const *argv[])
{
	int a[] = {1,2,3,4,5,6,7,8,9,10};
	int b[] = {10,9,8,7,6,5,4,3,2,1};
	SelectSort(b,10);
	for(int i=0;i<10;i++)
	{
		printf("%d\n",b[i]);
	}
	return 0;
}